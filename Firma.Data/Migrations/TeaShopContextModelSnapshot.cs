// <auto-generated />
using System;
using Firma.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Firma.Data.Migrations
{
    [DbContext(typeof(TeaShopContext))]
    partial class TeaShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Polish_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Firma.Data.Models.Adres", b =>
                {
                    b.Property<int>("IdAdresu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAdresu"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Gmina")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<int?>("IdKraju")
                        .HasColumnType("int");

                    b.Property<int?>("IdWojewodzctwa")
                        .HasColumnType("int");

                    b.Property<string>("KodPocztowy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Miejscowosc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrDomu")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NrLokalu")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Powiat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ulica")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAdresu");

                    b.HasIndex("IdKraju");

                    b.HasIndex("IdWojewodzctwa");

                    b.ToTable("Adres", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Bank", b =>
                {
                    b.Property<int>("IdBanku")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBanku"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaBanku")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumerKonta")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdBanku");

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.CMS.CMSAktualnosc", b =>
                {
                    b.Property<int>("IdAktualnosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAktualnosci"), 1L, 1);

                    b.Property<string>("LinkTytul")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Pozycja")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdAktualnosci");

                    b.ToTable("CMSAktualnosc", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.CMS.CMSParametr", b =>
                {
                    b.Property<int>("IdParametru")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParametru"), 1L, 1);

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wartosc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdParametru");

                    b.ToTable("CMSParametr", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.CMS.CMSStrona", b =>
                {
                    b.Property<int>("IdStrony")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStrony"), 1L, 1);

                    b.Property<string>("LinkTytul")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Pozycja")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdStrony");

                    b.ToTable("CMSStrona", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.DaneLogowania", b =>
                {
                    b.Property<int>("IdDaneLogowania")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDaneLogowania"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataUtworzenia")
                        .HasColumnType("datetime");

                    b.Property<string>("HasloUzytkownika")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwaUzytkownika")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdDaneLogowania");

                    b.ToTable("DaneLogowania", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.DanePersonalne", b =>
                {
                    b.Property<int>("IdDanePersonalne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDanePersonalne"), 1L, 1);

                    b.Property<string>("BankDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataUrodzenia")
                        .HasColumnType("datetime");

                    b.Property<string>("DrugieImie")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FormaPlatnosciDane")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<string>("ImieDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImieMatki")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImieOjca")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KodDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KodPocztowyDane")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kraj")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiejscowoscDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwaDane")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwiskoDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwiskoRodoweMatki")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nipdane")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NIPDane");

                    b.Property<string>("NrDomuDane")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NrLokaluDane")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NrPaszportu")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Peseldane")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PESELDane");

                    b.Property<string>("Plec")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("RabatDane")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("RachunekNrDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Regondane")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("REGONDane");

                    b.Property<string>("TelefonDane")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UlicaDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UwagiDane")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WalutaDane")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Wojewodztwo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdDanePersonalne");

                    b.ToTable("DanePersonalne", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Dodatkowe", b =>
                {
                    b.Property<int>("IdDodatkowe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDodatkowe"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uwagi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDodatkowe");

                    b.ToTable("Dodatkowe", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.DokumentSprzedazy", b =>
                {
                    b.Property<int>("IdDokumentuSprzedazy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDokumentuSprzedazy"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataWystawienia")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAdres")
                        .HasColumnType("int");

                    b.Property<int?>("IdDaneParsonalne")
                        .HasColumnType("int");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<int?>("IdKontrahenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnosci")
                        .HasColumnType("int");

                    b.Property<int?>("IdRabatu")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajuDokumentow")
                        .HasColumnType("int");

                    b.Property<int?>("IdSposobuPlatnosci")
                        .HasColumnType("int");

                    b.Property<int?>("IdSzczegolyTowaru")
                        .HasColumnType("int");

                    b.Property<int?>("IdTowaru")
                        .HasColumnType("int");

                    b.Property<decimal?>("Ilosc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumerDokumentu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PozycjaDokumentu")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TerminPlatnosci")
                        .HasColumnType("datetime");

                    b.HasKey("IdDokumentuSprzedazy");

                    b.HasIndex("IdAdres");

                    b.HasIndex("IdDaneParsonalne");

                    b.HasIndex("IdDodatkowe");

                    b.HasIndex("IdKontrahenta");

                    b.HasIndex("IdPlatnosci");

                    b.HasIndex("IdRabatu");

                    b.HasIndex("IdRodzajuDokumentow");

                    b.HasIndex("IdSposobuPlatnosci");

                    b.HasIndex("IdSzczegolyTowaru");

                    b.HasIndex("IdTowaru");

                    b.ToTable("DokumentSprzedazy", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.KategoriaTowaru", b =>
                {
                    b.Property<int>("IdKategoriiTowaru")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKategoriiTowaru"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaKategorii")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdKategoriiTowaru");

                    b.ToTable("KategoriaTowaru", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Kontrahent", b =>
                {
                    b.Property<int>("IdKontrahenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKontrahenta"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<int?>("IdAdresu")
                        .HasColumnType("int");

                    b.Property<int?>("IdBanku")
                        .HasColumnType("int");

                    b.Property<int?>("IdDanePersonalne")
                        .HasColumnType("int");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnosci")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlci")
                        .HasColumnType("int");

                    b.Property<int?>("IdRabatu")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajuDokumentow")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypuKontrahenta")
                        .HasColumnType("int");

                    b.HasKey("IdKontrahenta");

                    b.HasIndex("IdAdresu");

                    b.HasIndex("IdBanku");

                    b.HasIndex("IdDanePersonalne");

                    b.HasIndex("IdDodatkowe");

                    b.HasIndex("IdPlatnosci");

                    b.HasIndex("IdPlci");

                    b.HasIndex("IdRabatu");

                    b.HasIndex("IdRodzajuDokumentow");

                    b.HasIndex("IdTypuKontrahenta");

                    b.ToTable("Kontrahent", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Kraj", b =>
                {
                    b.Property<int>("IdKraju")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKraju"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaKraju")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdKraju");

                    b.ToTable("Kraj", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Marka", b =>
                {
                    b.Property<int>("IdMarki")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMarki"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaMarki")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMarki");

                    b.ToTable("Marka", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.PlanUrlopu", b =>
                {
                    b.Property<int>("IdPlanuUrlospu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlanuUrlospu"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataRozpoczeciaUrlopu")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataZakonczeniaUrlopu")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Dni")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("IdPracownika")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajWolnego")
                        .HasColumnType("int");

                    b.Property<int?>("IdUrlopu")
                        .HasColumnType("int");

                    b.HasKey("IdPlanuUrlospu");

                    b.HasIndex("IdPracownika");

                    b.HasIndex("IdRodzajWolnego");

                    b.HasIndex("IdUrlopu");

                    b.ToTable("PlanUrlopu", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscBlikiem", b =>
                {
                    b.Property<int>("IdPlatnosciBlikiem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlatnosciBlikiem"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataPaltnosci")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdPlatnoscDoDostawcy")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnoscOdKontrahenta")
                        .HasColumnType("int");

                    b.HasKey("IdPlatnosciBlikiem");

                    b.HasIndex("IdPlatnoscDoDostawcy");

                    b.HasIndex("IdPlatnoscOdKontrahenta");

                    b.ToTable("PlatnoscBlikiem", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscDoDostawcy", b =>
                {
                    b.Property<int>("IdPlatnosciDoDostawcy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlatnosciDoDostawcy"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<decimal?>("KwotaBrutto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("KwotaNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Marza")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Waluta")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPlatnosciDoDostawcy");

                    b.ToTable("PlatnoscDoDostawcy", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscGotowka", b =>
                {
                    b.Property<int>("IdPlatnosciGotowka")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlatnosciGotowka"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataPaltnosci")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdPlatnoscDoDostawcy")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnoscOdKontrahenta")
                        .HasColumnType("int");

                    b.HasKey("IdPlatnosciGotowka");

                    b.HasIndex("IdPlatnoscDoDostawcy");

                    b.HasIndex("IdPlatnoscOdKontrahenta");

                    b.ToTable("PlatnoscGotowka", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Platnosci", b =>
                {
                    b.Property<int>("IdPlatnosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlatnosci"), 1L, 1);

                    b.Property<decimal?>("Brutto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPlatnosciBlikiem")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnosciDoDostawcy")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnosciGotowka")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnosciKarta")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnosciOdKontrahenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnosciPrzelewem")
                        .HasColumnType("int");

                    b.Property<decimal?>("Netto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NrKontaBankowego")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("RejestrDluznikow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Waluta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WartoscZamowienia")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPlatnosci");

                    b.HasIndex("IdPlatnosciBlikiem");

                    b.HasIndex("IdPlatnosciDoDostawcy");

                    b.HasIndex("IdPlatnosciGotowka");

                    b.HasIndex("IdPlatnosciKarta");

                    b.HasIndex("IdPlatnosciOdKontrahenta");

                    b.HasIndex("IdPlatnosciPrzelewem");

                    b.ToTable("Platnosci", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscKarta", b =>
                {
                    b.Property<int>("IdPlatnosciKarta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlatnosciKarta"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataPaltnosci")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdPlatnoscDoDostawcy")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnoscOdKontrahenta")
                        .HasColumnType("int");

                    b.HasKey("IdPlatnosciKarta");

                    b.HasIndex("IdPlatnoscDoDostawcy");

                    b.HasIndex("IdPlatnoscOdKontrahenta");

                    b.ToTable("PlatnoscKarta", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscOdKontrahenta", b =>
                {
                    b.Property<int>("IdPlatnosciOdKontrahenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlatnosciOdKontrahenta"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<decimal?>("KwotaBrutto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("KwotaNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Marza")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Waluta")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPlatnosciOdKontrahenta");

                    b.ToTable("PlatnoscOdKontrahenta", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscPrzelewem", b =>
                {
                    b.Property<int>("IdPlatnosciPrzelewem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlatnosciPrzelewem"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataPaltnosci")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdBanku")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnoscDoDostawcy")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnoscOdKontrahenta")
                        .HasColumnType("int");

                    b.HasKey("IdPlatnosciPrzelewem");

                    b.HasIndex("IdBanku");

                    b.HasIndex("IdPlatnoscDoDostawcy");

                    b.HasIndex("IdPlatnoscOdKontrahenta");

                    b.ToTable("PlatnoscPrzelewem", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Plec", b =>
                {
                    b.Property<int>("IdPlci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlci"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaPlci")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPlci");

                    b.ToTable("Plec", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Pracownik", b =>
                {
                    b.Property<int>("IdPracownika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPracownika"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataRozpPracyP")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataUrodzeniaP")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataZatrudnieniaP")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataZwolnieniaP")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DodatkoweDniUrlopuP")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("DrugieImieP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GminaP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdAdresu")
                        .HasColumnType("int");

                    b.Property<int?>("IdBanku")
                        .HasColumnType("int");

                    b.Property<int?>("IdDanePersonalne")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlci")
                        .HasColumnType("int");

                    b.Property<int?>("IdStanowiskoPracownika")
                        .HasColumnType("int");

                    b.Property<int?>("IdUrlopu")
                        .HasColumnType("int");

                    b.Property<int?>("IdUzytkownika")
                        .HasColumnType("int");

                    b.Property<decimal?>("IdWynagrodzenie")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("IdZatrudnienia")
                        .HasColumnType("int");

                    b.Property<string>("ImieMatkiP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImieOjcaP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImieP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KodPocztowyP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KrajP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("LimitUrlopuP")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("MiejscowoscP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwiskoP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwiskoRodoweP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrDomuP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrLokaluP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrPaszportuP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Peselp")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PESELP");

                    b.Property<string>("PlecP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PowiatP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("PozostaloP")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("RodzajUmowyP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RodzajZatrudnieniaP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StanowiskoP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("StawkaP")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("TelefonP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UlicaP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WojewodzctwoP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("WykorzystanoP")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("WymiarEtatuP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdPracownika");

                    b.HasIndex("IdAdresu");

                    b.HasIndex("IdBanku");

                    b.HasIndex("IdDanePersonalne");

                    b.HasIndex("IdPlci");

                    b.HasIndex("IdStanowiskoPracownika");

                    b.HasIndex("IdUrlopu");

                    b.HasIndex("IdUzytkownika");

                    b.HasIndex("IdZatrudnienia");

                    b.ToTable("Pracownik", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Producent", b =>
                {
                    b.Property<int>("IdProducenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProducenta"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Gwarancja")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("NazwaProducenta")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdProducenta");

                    b.ToTable("Producent", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Rabat", b =>
                {
                    b.Property<int>("IdRabatu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRabatu"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Procent")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("IdRabatu");

                    b.ToTable("Rabat", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Reklamacje", b =>
                {
                    b.Property<int>("IdReklamacji")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReklamacji"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataGwarancjiDo")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataPowstaniaWady")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataZakupu")
                        .HasColumnType("datetime");

                    b.Property<string>("DokumentR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DostawcaR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<int?>("IdDokumentuSprzedazy")
                        .HasColumnType("int");

                    b.Property<int?>("IdKontrahenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatusu")
                        .HasColumnType("int");

                    b.Property<int?>("IdTowaru")
                        .HasColumnType("int");

                    b.Property<int?>("IdZadanieReklamujacego")
                        .HasColumnType("int");

                    b.Property<string>("IloscR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImieR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JednostkaR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KodPocztowyR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiejscowoscR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwiskoR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrDomuR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrLokaluR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OpisR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Peselr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PESELR");

                    b.Property<string>("TelefonR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TowaryR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UlicaR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZadaniaReklamujacegoR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdReklamacji");

                    b.HasIndex("IdDodatkowe");

                    b.HasIndex("IdDokumentuSprzedazy");

                    b.HasIndex("IdKontrahenta");

                    b.HasIndex("IdStatusu");

                    b.HasIndex("IdTowaru");

                    b.HasIndex("IdZadanieReklamujacego");

                    b.ToTable("Reklamacje", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.RodzajDokumentu", b =>
                {
                    b.Property<int>("IdRodzajuDokumentow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRodzajuDokumentow"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Dokument")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdRodzajuDokumentow");

                    b.ToTable("RodzajDokumentu", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.RodzajUmowy", b =>
                {
                    b.Property<int>("IdRodzajuUmowy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRodzajuUmowy"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaUmowy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdRodzajuUmowy");

                    b.ToTable("RodzajUmowy", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.RodzajWolnego", b =>
                {
                    b.Property<int>("IdRodzajWolnego")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRodzajWolnego"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaWolnego")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdRodzajWolnego");

                    b.ToTable("RodzajWolnego", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.RodzajZatrudnienia", b =>
                {
                    b.Property<int>("IdRodzajZatrudnienia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRodzajZatrudnienia"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaRodzajuZatrudnienia")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdRodzajZatrudnienia");

                    b.ToTable("RodzajZatrudnienia", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Sklep.KoszykTemp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ilość")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("KoszykTemp", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Sklep.SklepElementKoszyka", b =>
                {
                    b.Property<int>("IdElementuKoszyka")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdElementuKoszyka"), 1L, 1);

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdSesjiKoszyka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTowaru")
                        .HasColumnType("int");

                    b.Property<int>("Ilosc")
                        .HasColumnType("int");

                    b.Property<int>("SklepTowarIdTowaru")
                        .HasColumnType("int");

                    b.HasKey("IdElementuKoszyka");

                    b.HasIndex("SklepTowarIdTowaru");

                    b.ToTable("SklepElementKoszyka", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Sklep.SklepRodzaj", b =>
                {
                    b.Property<int>("IdRodzaju")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRodzaju"), 1L, 1);

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRodzaju");

                    b.ToTable("SklepRodzaj", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Sklep.SklepTowar", b =>
                {
                    b.Property<int>("IdTowaru")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTowaru"), 1L, 1);

                    b.Property<decimal>("Cena")
                        .HasColumnType("money");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRodzaju")
                        .HasColumnType("int");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Promocja")
                        .HasColumnType("bit");

                    b.HasKey("IdTowaru");

                    b.ToTable("SklepTowar", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.SortowanieDokumentow", b =>
                {
                    b.Property<int>("SortujDokumenty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SortujDokumenty"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaSortowaniaDokumentow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SortujDokumenty");

                    b.ToTable("SortowanieDokumentow", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.SortowaniePracownikow", b =>
                {
                    b.Property<int>("SortujPracownikow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SortujPracownikow"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaSortowaniaPracownikow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SortujPracownikow");

                    b.ToTable("SortowaniePracownikow", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.SortowanieReklamacji", b =>
                {
                    b.Property<int>("SortujEtapReklamacji")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SortujEtapReklamacji"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaSortowaniaEtapuReklamacji")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SortujEtapReklamacji");

                    b.ToTable("SortowanieReklamacji", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.SortowanieTowaru", b =>
                {
                    b.Property<int>("SortujTowar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SortujTowar"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaSortowaniaTowaru")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SortujTowar");

                    b.ToTable("SortowanieTowaru", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.SortowanieUrlopow", b =>
                {
                    b.Property<int>("SortujUrlop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SortujUrlop"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaSortowaniaUrlopu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SortujUrlop");

                    b.ToTable("SortowanieUrlopow", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.SortowanieUzytkownikow", b =>
                {
                    b.Property<int>("SortujUzytkownikow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SortujUzytkownikow"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaSortowaniaUzytkownikow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SortujUzytkownikow");

                    b.ToTable("SortowanieUzytkownikow", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.SposobPlatnosci", b =>
                {
                    b.Property<int>("IdSposobuPlatnosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSposobuPlatnosci"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaSposobuPlatnosci")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdSposobuPlatnosci");

                    b.ToTable("SposobPlatnosci", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.StanowiskoPracownika", b =>
                {
                    b.Property<int>("IdStanowiskoPracownika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStanowiskoPracownika"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaStanowiska")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("IdStanowiskoPracownika");

                    b.ToTable("StanowiskoPracownika", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Status", b =>
                {
                    b.Property<int>("IdStatusu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatusu"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaStatusu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdStatusu");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.SzczegolyTowaru", b =>
                {
                    b.Property<int>("IdSzczegolyTowaru")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSzczegolyTowaru"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<int?>("IdKategoriiTowaru")
                        .HasColumnType("int");

                    b.Property<int?>("IdMarki")
                        .HasColumnType("int");

                    b.Property<string>("OkresGwarancji")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdSzczegolyTowaru");

                    b.HasIndex("IdDodatkowe");

                    b.HasIndex("IdKategoriiTowaru");

                    b.HasIndex("IdMarki");

                    b.ToTable("SzczegolyTowaru", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Towar", b =>
                {
                    b.Property<int>("IdTowaru")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTowaru"), 1L, 1);

                    b.Property<decimal?>("CenaBrutto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CenaNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<int?>("IdKategoriiTowaru")
                        .HasColumnType("int");

                    b.Property<int?>("IdMarki")
                        .HasColumnType("int");

                    b.Property<int?>("IdProducenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajuDokumentow")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypKontrahenta")
                        .HasColumnType("int")
                        .HasColumnName("idTypKontrahenta");

                    b.Property<decimal?>("Ilosc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("JednostkaMiary")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("KategoriaTowaruT")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Kod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KodEan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarkaT")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Marza")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProducentT")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SklepRodzajIdRodzaju")
                        .HasColumnType("int");

                    b.Property<decimal?>("StawkaVatSprzedazy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("StawkaVatZakupu")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdTowaru");

                    b.HasIndex("IdDodatkowe");

                    b.HasIndex("IdKategoriiTowaru");

                    b.HasIndex("IdMarki");

                    b.HasIndex("IdProducenta");

                    b.HasIndex("IdRodzajuDokumentow");

                    b.HasIndex("IdTypKontrahenta");

                    b.HasIndex("SklepRodzajIdRodzaju");

                    b.ToTable("Towar", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.TypKontrahenta", b =>
                {
                    b.Property<int>("IdTypuKontrahenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypuKontrahenta"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Dostawca")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdAdresu")
                        .HasColumnType("int");

                    b.Property<int?>("IdDanePersonalne")
                        .HasColumnType("int");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<int?>("IdKontrahenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajuDokumentow")
                        .HasColumnType("int");

                    b.Property<string>("Odbiorca")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Zablokowany")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTypuKontrahenta");

                    b.HasIndex("IdAdresu");

                    b.HasIndex("IdDanePersonalne");

                    b.HasIndex("IdDodatkowe");

                    b.HasIndex("IdRodzajuDokumentow");

                    b.ToTable("TypKontrahenta", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Urlop", b =>
                {
                    b.Property<int>("IdUrlopu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUrlopu"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataRozpUrlopuU")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataUrodzeniaU")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataZakonczeniaUrlopu")
                        .HasColumnType("date");

                    b.Property<decimal?>("DodatkoweDniUrlopu")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("DrugieImieU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GminaU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdRodzajWolnego")
                        .HasColumnType("int");

                    b.Property<string>("ImieMatkiU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImieOjcaU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImieU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KrajU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("LimitUrlopuU")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("MiejscowoscU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwaPracownikU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwiskoRodMatU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwiskoU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrDomuU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrLokaluU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NrPaszportuU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PowiatU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RodzajUmowyU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RodzajUrlopuU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StanowiskoU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelefonU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UlicaU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WojewodzctwoU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("WykorzystanoU")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("WymiarEtatuU")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdUrlopu");

                    b.HasIndex("IdRodzajWolnego");

                    b.ToTable("Urlop", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Uzytkownik", b =>
                {
                    b.Property<int>("IdUzytkownika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUzytkownika"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<int?>("IdDaneLogowania")
                        .HasColumnType("int");

                    b.Property<int?>("IdDanePersonalne")
                        .HasColumnType("int");

                    b.Property<int?>("IdStanowiskoPracownika")
                        .HasColumnType("int");

                    b.HasKey("IdUzytkownika");

                    b.HasIndex("IdDaneLogowania");

                    b.HasIndex("IdDanePersonalne");

                    b.HasIndex("IdStanowiskoPracownika");

                    b.ToTable("Uzytkownik", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Wojewodzctwo", b =>
                {
                    b.Property<int>("IdWojewodzctwa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWojewodzctwa"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaWojewodzctwa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdWojewodzctwa");

                    b.ToTable("Wojewodzctwo", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Wynagrodzenie", b =>
                {
                    b.Property<int>("IdWynagrodzenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWynagrodzenia"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPracownika")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajZatrudnienia")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajuUmowy")
                        .HasColumnType("int");

                    b.Property<int?>("IdStanowiskoPracownika")
                        .HasColumnType("int");

                    b.Property<int?>("IdZatrudnienia")
                        .HasColumnType("int");

                    b.Property<decimal?>("Stawka")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdWynagrodzenia");

                    b.HasIndex("IdPracownika");

                    b.HasIndex("IdRodzajZatrudnienia");

                    b.HasIndex("IdRodzajuUmowy");

                    b.HasIndex("IdStanowiskoPracownika");

                    b.HasIndex("IdZatrudnienia");

                    b.ToTable("Wynagrodzenie", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.ZadanieReklamujacego", b =>
                {
                    b.Property<int>("IdZadanieReklamujacego")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZadanieReklamujacego"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaZadanie")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdZadanieReklamujacego");

                    b.ToTable("ZadanieReklamujacego", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.ZakresWyszukiwaniaDaty", b =>
                {
                    b.Property<int>("ZakresyWyszukiwaniaDaty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZakresyWyszukiwaniaDaty"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<string>("NazwaZakresuWyszukiwaniaDaty")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ZakresyWyszukiwaniaDaty");

                    b.ToTable("ZakresWyszukiwaniaDaty", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.ZakupTowaru", b =>
                {
                    b.Property<int>("IdZakupuTowaru")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZakupuTowaru"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<int?>("IdDodatkowe")
                        .HasColumnType("int");

                    b.Property<int?>("IdDokumentuSprzedazy")
                        .HasColumnType("int");

                    b.Property<int?>("IdKontrahenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdPlatnosci")
                        .HasColumnType("int");

                    b.Property<int?>("IdRabatu")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajuDokumentow")
                        .HasColumnType("int");

                    b.Property<int?>("IdSposobuPlatnosci")
                        .HasColumnType("int");

                    b.Property<int?>("IdSzczegolyTowaru")
                        .HasColumnType("int");

                    b.Property<int?>("IdTowaru")
                        .HasColumnType("int");

                    b.HasKey("IdZakupuTowaru");

                    b.HasIndex("IdDodatkowe");

                    b.HasIndex("IdDokumentuSprzedazy");

                    b.HasIndex("IdKontrahenta");

                    b.HasIndex("IdPlatnosci");

                    b.HasIndex("IdRabatu");

                    b.HasIndex("IdRodzajuDokumentow");

                    b.HasIndex("IdSposobuPlatnosci");

                    b.HasIndex("IdSzczegolyTowaru");

                    b.HasIndex("IdTowaru");

                    b.ToTable("ZakupTowaru", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Zatrudnienie", b =>
                {
                    b.Property<int>("IdZatrudnienia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZatrudnienia"), 1L, 1);

                    b.Property<bool?>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataRoczpoczeciaPracy")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataZatrudnienia")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataZwolnienia")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdRodzajZatrudnienia")
                        .HasColumnType("int");

                    b.Property<int?>("IdRodzajuUmowy")
                        .HasColumnType("int");

                    b.Property<int?>("IdStanowiskoPracownika")
                        .HasColumnType("int");

                    b.Property<int?>("IdUrlop")
                        .HasColumnType("int");

                    b.Property<string>("WymiarEtatu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdZatrudnienia");

                    b.HasIndex("IdRodzajuUmowy");

                    b.HasIndex("IdStanowiskoPracownika");

                    b.HasIndex("IdUrlop");

                    b.ToTable("Zatrudnienie", (string)null);
                });

            modelBuilder.Entity("Firma.Data.Models.Adres", b =>
                {
                    b.HasOne("Firma.Data.Models.Kraj", "IdKrajuNavigation")
                        .WithMany("Adres")
                        .HasForeignKey("IdKraju")
                        .HasConstraintName("FK_Adres_Kraj");

                    b.HasOne("Firma.Data.Models.Wojewodzctwo", "IdWojewodzctwaNavigation")
                        .WithMany("Adres")
                        .HasForeignKey("IdWojewodzctwa")
                        .HasConstraintName("FK_Adres_Wojewodzctwo");

                    b.Navigation("IdKrajuNavigation");

                    b.Navigation("IdWojewodzctwaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.DokumentSprzedazy", b =>
                {
                    b.HasOne("Firma.Data.Models.Adres", "IdAdresNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdAdres")
                        .HasConstraintName("FK_DokumentSprzedazy_Adres");

                    b.HasOne("Firma.Data.Models.DanePersonalne", "IdDaneParsonalneNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdDaneParsonalne")
                        .HasConstraintName("FK_DokumentSprzedazy_DanePersonalne");

                    b.HasOne("Firma.Data.Models.Dodatkowe", "IdDodatkoweNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdDodatkowe")
                        .HasConstraintName("FK_DokumentSprzedazy_Dodatkowe");

                    b.HasOne("Firma.Data.Models.Kontrahent", "IdKontrahentaNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdKontrahenta")
                        .HasConstraintName("FK_DokumentSprzedazy_Kontrahent");

                    b.HasOne("Firma.Data.Models.Platnosci", "IdPlatnosciNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdPlatnosci")
                        .HasConstraintName("FK_DokumentSprzedazy_Platnosci");

                    b.HasOne("Firma.Data.Models.Rabat", "IdRabatuNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdRabatu")
                        .HasConstraintName("FK_DokumentSprzedazy_Rabat");

                    b.HasOne("Firma.Data.Models.RodzajDokumentu", "IdRodzajuDokumentowNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdRodzajuDokumentow")
                        .HasConstraintName("FK_DokumentSprzedazy_RodzajDokumentu");

                    b.HasOne("Firma.Data.Models.SposobPlatnosci", "IdSposobuPlatnosciNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdSposobuPlatnosci")
                        .HasConstraintName("FK_DokumentSprzedazy_SposobPlatnosci");

                    b.HasOne("Firma.Data.Models.SzczegolyTowaru", "IdSzczegolyTowaruNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdSzczegolyTowaru")
                        .HasConstraintName("FK_DokumentSprzedazy_SzczegolyTowaru");

                    b.HasOne("Firma.Data.Models.Towar", "IdTowaruNavigation")
                        .WithMany("DokumentSprzedazies")
                        .HasForeignKey("IdTowaru")
                        .HasConstraintName("FK_DokumentSprzedazy_Towar");

                    b.Navigation("IdAdresNavigation");

                    b.Navigation("IdDaneParsonalneNavigation");

                    b.Navigation("IdDodatkoweNavigation");

                    b.Navigation("IdKontrahentaNavigation");

                    b.Navigation("IdPlatnosciNavigation");

                    b.Navigation("IdRabatuNavigation");

                    b.Navigation("IdRodzajuDokumentowNavigation");

                    b.Navigation("IdSposobuPlatnosciNavigation");

                    b.Navigation("IdSzczegolyTowaruNavigation");

                    b.Navigation("IdTowaruNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Kontrahent", b =>
                {
                    b.HasOne("Firma.Data.Models.Adres", "IdAdresuNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdAdresu")
                        .HasConstraintName("FK_Kontrahent_Adres");

                    b.HasOne("Firma.Data.Models.Bank", "IdBankuNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdBanku")
                        .HasConstraintName("FK_Kontrahent_Bank");

                    b.HasOne("Firma.Data.Models.DanePersonalne", "IdDanePersonalneNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdDanePersonalne")
                        .HasConstraintName("FK_Kontrahent_DanePersonalne");

                    b.HasOne("Firma.Data.Models.Dodatkowe", "IdDodatkoweNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdDodatkowe")
                        .HasConstraintName("FK_Kontrahent_Dodatkowe");

                    b.HasOne("Firma.Data.Models.Platnosci", "IdPlatnosciNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdPlatnosci")
                        .HasConstraintName("FK_Kontrahent_Platnosci");

                    b.HasOne("Firma.Data.Models.Plec", "IdPlciNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdPlci")
                        .HasConstraintName("FK_Kontrahent_Plec");

                    b.HasOne("Firma.Data.Models.Rabat", "IdRabatuNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdRabatu")
                        .HasConstraintName("FK_Kontrahent_Rabat");

                    b.HasOne("Firma.Data.Models.RodzajDokumentu", "IdRodzajuDokumentowNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdRodzajuDokumentow")
                        .HasConstraintName("FK_Kontrahent_RodzajDokumentu");

                    b.HasOne("Firma.Data.Models.TypKontrahenta", "IdTypuKontrahentaNavigation")
                        .WithMany("Kontrahents")
                        .HasForeignKey("IdTypuKontrahenta")
                        .HasConstraintName("FK_Kontrahent_TypKontrahenta");

                    b.Navigation("IdAdresuNavigation");

                    b.Navigation("IdBankuNavigation");

                    b.Navigation("IdDanePersonalneNavigation");

                    b.Navigation("IdDodatkoweNavigation");

                    b.Navigation("IdPlatnosciNavigation");

                    b.Navigation("IdPlciNavigation");

                    b.Navigation("IdRabatuNavigation");

                    b.Navigation("IdRodzajuDokumentowNavigation");

                    b.Navigation("IdTypuKontrahentaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.PlanUrlopu", b =>
                {
                    b.HasOne("Firma.Data.Models.Pracownik", "IdPracownikaNavigation")
                        .WithMany("PlanUrlopus")
                        .HasForeignKey("IdPracownika")
                        .HasConstraintName("FK_PlanUrlopu_Pracownik");

                    b.HasOne("Firma.Data.Models.RodzajWolnego", "IdRodzajWolnegoNavigation")
                        .WithMany("PlanUrlopus")
                        .HasForeignKey("IdRodzajWolnego")
                        .HasConstraintName("FK_PlanUrlopu_RodzajWolnego");

                    b.HasOne("Firma.Data.Models.Urlop", "IdUrlopuNavigation")
                        .WithMany("PlanUrlopus")
                        .HasForeignKey("IdUrlopu")
                        .HasConstraintName("FK_PlanUrlopu_Urlop");

                    b.Navigation("IdPracownikaNavigation");

                    b.Navigation("IdRodzajWolnegoNavigation");

                    b.Navigation("IdUrlopuNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscBlikiem", b =>
                {
                    b.HasOne("Firma.Data.Models.PlatnoscDoDostawcy", "IdPlatnoscDoDostawcyNavigation")
                        .WithMany("PlatnoscBlikiems")
                        .HasForeignKey("IdPlatnoscDoDostawcy")
                        .HasConstraintName("FK_PlatnoscBlikiem_PlatnoscDoDostawcy");

                    b.HasOne("Firma.Data.Models.PlatnoscOdKontrahenta", "IdPlatnoscOdKontrahentaNavigation")
                        .WithMany("PlatnoscBlikiems")
                        .HasForeignKey("IdPlatnoscOdKontrahenta")
                        .HasConstraintName("FK_PlatnoscBlikiem_PlatnoscOdKontrahenta");

                    b.Navigation("IdPlatnoscDoDostawcyNavigation");

                    b.Navigation("IdPlatnoscOdKontrahentaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscGotowka", b =>
                {
                    b.HasOne("Firma.Data.Models.PlatnoscDoDostawcy", "IdPlatnoscDoDostawcyNavigation")
                        .WithMany("PlatnoscGotowkas")
                        .HasForeignKey("IdPlatnoscDoDostawcy")
                        .HasConstraintName("FK_PlatnoscGotowka_PlatnoscDoDostawcy");

                    b.HasOne("Firma.Data.Models.PlatnoscOdKontrahenta", "IdPlatnoscOdKontrahentaNavigation")
                        .WithMany("PlatnoscGotowkas")
                        .HasForeignKey("IdPlatnoscOdKontrahenta")
                        .HasConstraintName("FK_PlatnoscGotowka_PlatnoscOdKontrahenta");

                    b.Navigation("IdPlatnoscDoDostawcyNavigation");

                    b.Navigation("IdPlatnoscOdKontrahentaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Platnosci", b =>
                {
                    b.HasOne("Firma.Data.Models.PlatnoscBlikiem", "IdPlatnosciBlikiemNavigation")
                        .WithMany("Platnoscis")
                        .HasForeignKey("IdPlatnosciBlikiem")
                        .HasConstraintName("FK_Platnosci_PlatnoscBlikiem");

                    b.HasOne("Firma.Data.Models.PlatnoscDoDostawcy", "IdPlatnosciDoDostawcyNavigation")
                        .WithMany("Platnoscis")
                        .HasForeignKey("IdPlatnosciDoDostawcy")
                        .HasConstraintName("FK_Platnosci_PlatnoscDoDostawcy");

                    b.HasOne("Firma.Data.Models.PlatnoscGotowka", "IdPlatnosciGotowkaNavigation")
                        .WithMany("Platnoscis")
                        .HasForeignKey("IdPlatnosciGotowka")
                        .HasConstraintName("FK_Platnosci_PlatnoscGotowka");

                    b.HasOne("Firma.Data.Models.PlatnoscKarta", "IdPlatnosciKartaNavigation")
                        .WithMany("Platnoscis")
                        .HasForeignKey("IdPlatnosciKarta")
                        .HasConstraintName("FK_Platnosci_PlatnoscKarta");

                    b.HasOne("Firma.Data.Models.PlatnoscOdKontrahenta", "IdPlatnosciOdKontrahentaNavigation")
                        .WithMany("Platnoscis")
                        .HasForeignKey("IdPlatnosciOdKontrahenta")
                        .HasConstraintName("FK_Platnosci_PlatnoscOdKontrahenta");

                    b.HasOne("Firma.Data.Models.PlatnoscPrzelewem", "IdPlatnosciPrzelewemNavigation")
                        .WithMany("Platnoscis")
                        .HasForeignKey("IdPlatnosciPrzelewem")
                        .HasConstraintName("FK_Platnosci_PlatnoscPrzelewem");

                    b.Navigation("IdPlatnosciBlikiemNavigation");

                    b.Navigation("IdPlatnosciDoDostawcyNavigation");

                    b.Navigation("IdPlatnosciGotowkaNavigation");

                    b.Navigation("IdPlatnosciKartaNavigation");

                    b.Navigation("IdPlatnosciOdKontrahentaNavigation");

                    b.Navigation("IdPlatnosciPrzelewemNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscKarta", b =>
                {
                    b.HasOne("Firma.Data.Models.PlatnoscDoDostawcy", "IdPlatnoscDoDostawcyNavigation")
                        .WithMany("PlatnoscKarta")
                        .HasForeignKey("IdPlatnoscDoDostawcy")
                        .HasConstraintName("FK_PlatnoscKarta_PlatnoscDoDostawcy");

                    b.HasOne("Firma.Data.Models.PlatnoscOdKontrahenta", "IdPlatnoscOdKontrahentaNavigation")
                        .WithMany("PlatnoscKarta")
                        .HasForeignKey("IdPlatnoscOdKontrahenta")
                        .HasConstraintName("FK_PlatnoscKarta_PlatnoscOdKontrahenta");

                    b.Navigation("IdPlatnoscDoDostawcyNavigation");

                    b.Navigation("IdPlatnoscOdKontrahentaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscPrzelewem", b =>
                {
                    b.HasOne("Firma.Data.Models.Bank", "IdBankuNavigation")
                        .WithMany("PlatnoscPrzelewems")
                        .HasForeignKey("IdBanku")
                        .HasConstraintName("FK_PlatnoscPrzelewem_Bank");

                    b.HasOne("Firma.Data.Models.PlatnoscDoDostawcy", "IdPlatnoscDoDostawcyNavigation")
                        .WithMany("PlatnoscPrzelewems")
                        .HasForeignKey("IdPlatnoscDoDostawcy")
                        .HasConstraintName("FK_PlatnoscPrzelewem_PlatnoscDoDostawcy");

                    b.HasOne("Firma.Data.Models.PlatnoscOdKontrahenta", "IdPlatnoscOdKontrahentaNavigation")
                        .WithMany("PlatnoscPrzelewems")
                        .HasForeignKey("IdPlatnoscOdKontrahenta")
                        .HasConstraintName("FK_PlatnoscPrzelewem_PlatnoscOdKontrahenta");

                    b.Navigation("IdBankuNavigation");

                    b.Navigation("IdPlatnoscDoDostawcyNavigation");

                    b.Navigation("IdPlatnoscOdKontrahentaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Pracownik", b =>
                {
                    b.HasOne("Firma.Data.Models.Adres", "IdAdresuNavigation")
                        .WithMany("Pracowniks")
                        .HasForeignKey("IdAdresu")
                        .HasConstraintName("FK_Pracownik_Adres");

                    b.HasOne("Firma.Data.Models.Bank", "IdBankuNavigation")
                        .WithMany("Pracowniks")
                        .HasForeignKey("IdBanku")
                        .HasConstraintName("FK_Pracownik_Bank");

                    b.HasOne("Firma.Data.Models.DanePersonalne", "IdDanePersonalneNavigation")
                        .WithMany("Pracowniks")
                        .HasForeignKey("IdDanePersonalne")
                        .HasConstraintName("FK_Pracownik_DanePersonalne");

                    b.HasOne("Firma.Data.Models.Plec", "IdPlciNavigation")
                        .WithMany("Pracowniks")
                        .HasForeignKey("IdPlci")
                        .HasConstraintName("FK_Pracownik_Plec");

                    b.HasOne("Firma.Data.Models.StanowiskoPracownika", "IdStanowiskoPracownikaNavigation")
                        .WithMany("Pracowniks")
                        .HasForeignKey("IdStanowiskoPracownika")
                        .HasConstraintName("FK_Pracownik_StanowiskoPracownika");

                    b.HasOne("Firma.Data.Models.Urlop", "IdUrlopuNavigation")
                        .WithMany("Pracowniks")
                        .HasForeignKey("IdUrlopu")
                        .HasConstraintName("FK_Pracownik_Urlop");

                    b.HasOne("Firma.Data.Models.Uzytkownik", "IdUzytkownikaNavigation")
                        .WithMany("Pracowniks")
                        .HasForeignKey("IdUzytkownika")
                        .HasConstraintName("FK_Pracownik_Uzytkownik");

                    b.HasOne("Firma.Data.Models.Zatrudnienie", "IdZatrudnieniaNavigation")
                        .WithMany("Pracowniks")
                        .HasForeignKey("IdZatrudnienia")
                        .HasConstraintName("FK_Pracownik_Zatrudnienie");

                    b.Navigation("IdAdresuNavigation");

                    b.Navigation("IdBankuNavigation");

                    b.Navigation("IdDanePersonalneNavigation");

                    b.Navigation("IdPlciNavigation");

                    b.Navigation("IdStanowiskoPracownikaNavigation");

                    b.Navigation("IdUrlopuNavigation");

                    b.Navigation("IdUzytkownikaNavigation");

                    b.Navigation("IdZatrudnieniaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Reklamacje", b =>
                {
                    b.HasOne("Firma.Data.Models.Dodatkowe", "IdDodatkoweNavigation")
                        .WithMany("Reklamacjes")
                        .HasForeignKey("IdDodatkowe")
                        .HasConstraintName("FK_Reklamacje_Dodatkowe");

                    b.HasOne("Firma.Data.Models.DokumentSprzedazy", "IdDokumentuSprzedazyNavigation")
                        .WithMany("Reklamacjes")
                        .HasForeignKey("IdDokumentuSprzedazy")
                        .HasConstraintName("FK_Reklamacje_DokumentSprzedazy");

                    b.HasOne("Firma.Data.Models.Kontrahent", "IdKontrahentaNavigation")
                        .WithMany("Reklamacjes")
                        .HasForeignKey("IdKontrahenta")
                        .HasConstraintName("FK_Reklamacje_Kontrahent");

                    b.HasOne("Firma.Data.Models.Status", "IdStatusuNavigation")
                        .WithMany("Reklamacjes")
                        .HasForeignKey("IdStatusu")
                        .HasConstraintName("FK_Reklamacje_Status");

                    b.HasOne("Firma.Data.Models.Towar", "IdTowaruNavigation")
                        .WithMany("Reklamacjes")
                        .HasForeignKey("IdTowaru")
                        .HasConstraintName("FK_Reklamacje_Towar");

                    b.HasOne("Firma.Data.Models.ZadanieReklamujacego", "IdZadanieReklamujacegoNavigation")
                        .WithMany("Reklamacjes")
                        .HasForeignKey("IdZadanieReklamujacego")
                        .HasConstraintName("FK_Reklamacje_ZadanieReklamujacego");

                    b.Navigation("IdDodatkoweNavigation");

                    b.Navigation("IdDokumentuSprzedazyNavigation");

                    b.Navigation("IdKontrahentaNavigation");

                    b.Navigation("IdStatusuNavigation");

                    b.Navigation("IdTowaruNavigation");

                    b.Navigation("IdZadanieReklamujacegoNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Sklep.SklepElementKoszyka", b =>
                {
                    b.HasOne("Firma.Data.Models.Sklep.SklepTowar", "SklepTowar")
                        .WithMany()
                        .HasForeignKey("SklepTowarIdTowaru")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SklepTowar");
                });

            modelBuilder.Entity("Firma.Data.Models.SzczegolyTowaru", b =>
                {
                    b.HasOne("Firma.Data.Models.Dodatkowe", "IdDodatkoweNavigation")
                        .WithMany("SzczegolyTowarus")
                        .HasForeignKey("IdDodatkowe")
                        .HasConstraintName("FK_SzczegolyTowaru_Dodatkowe");

                    b.HasOne("Firma.Data.Models.KategoriaTowaru", "IdKategoriiTowaruNavigation")
                        .WithMany("SzczegolyTowarus")
                        .HasForeignKey("IdKategoriiTowaru")
                        .HasConstraintName("FK_SzczegolyTowaru_KategoriaTowaru");

                    b.HasOne("Firma.Data.Models.Marka", "IdMarkiNavigation")
                        .WithMany("SzczegolyTowarus")
                        .HasForeignKey("IdMarki")
                        .HasConstraintName("FK_SzczegolyTowaru_Marka");

                    b.Navigation("IdDodatkoweNavigation");

                    b.Navigation("IdKategoriiTowaruNavigation");

                    b.Navigation("IdMarkiNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Towar", b =>
                {
                    b.HasOne("Firma.Data.Models.Dodatkowe", "IdDodatkoweNavigation")
                        .WithMany("Towars")
                        .HasForeignKey("IdDodatkowe")
                        .HasConstraintName("FK_Towar_Dodatkowe");

                    b.HasOne("Firma.Data.Models.KategoriaTowaru", "IdKategoriiTowaruNavigation")
                        .WithMany("Towars")
                        .HasForeignKey("IdKategoriiTowaru")
                        .HasConstraintName("FK_Towar_KategoriaTowaru");

                    b.HasOne("Firma.Data.Models.Marka", "IdMarkiNavigation")
                        .WithMany("Towars")
                        .HasForeignKey("IdMarki")
                        .HasConstraintName("FK_Towar_Marka");

                    b.HasOne("Firma.Data.Models.Producent", "IdProducentaNavigation")
                        .WithMany("Towars")
                        .HasForeignKey("IdProducenta")
                        .HasConstraintName("FK_Towar_Producent");

                    b.HasOne("Firma.Data.Models.RodzajDokumentu", "IdRodzajuDokumentowNavigation")
                        .WithMany("Towars")
                        .HasForeignKey("IdRodzajuDokumentow")
                        .HasConstraintName("FK_Towar_RodzajDokumentu");

                    b.HasOne("Firma.Data.Models.TypKontrahenta", "IdTypKontrahentaNavigation")
                        .WithMany("Towars")
                        .HasForeignKey("IdTypKontrahenta")
                        .HasConstraintName("FK_Towar_TypKontrahenta");

                    b.HasOne("Firma.Data.Models.Sklep.SklepRodzaj", null)
                        .WithMany("Towar")
                        .HasForeignKey("SklepRodzajIdRodzaju");

                    b.Navigation("IdDodatkoweNavigation");

                    b.Navigation("IdKategoriiTowaruNavigation");

                    b.Navigation("IdMarkiNavigation");

                    b.Navigation("IdProducentaNavigation");

                    b.Navigation("IdRodzajuDokumentowNavigation");

                    b.Navigation("IdTypKontrahentaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.TypKontrahenta", b =>
                {
                    b.HasOne("Firma.Data.Models.Adres", "IdAdresuNavigation")
                        .WithMany("TypKontrahenta")
                        .HasForeignKey("IdAdresu")
                        .HasConstraintName("FK_TypKontrahenta_Adres");

                    b.HasOne("Firma.Data.Models.DanePersonalne", "IdDanePersonalneNavigation")
                        .WithMany("TypKontrahenta")
                        .HasForeignKey("IdDanePersonalne")
                        .HasConstraintName("FK_TypKontrahenta_DanePersonalne");

                    b.HasOne("Firma.Data.Models.Dodatkowe", "IdDodatkoweNavigation")
                        .WithMany("TypKontrahenta")
                        .HasForeignKey("IdDodatkowe")
                        .HasConstraintName("FK_TypKontrahenta_Dodatkowe");

                    b.HasOne("Firma.Data.Models.RodzajDokumentu", "IdRodzajuDokumentowNavigation")
                        .WithMany("TypKontrahenta")
                        .HasForeignKey("IdRodzajuDokumentow")
                        .HasConstraintName("FK_TypKontrahenta_RodzajDokumentu");

                    b.Navigation("IdAdresuNavigation");

                    b.Navigation("IdDanePersonalneNavigation");

                    b.Navigation("IdDodatkoweNavigation");

                    b.Navigation("IdRodzajuDokumentowNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Urlop", b =>
                {
                    b.HasOne("Firma.Data.Models.RodzajWolnego", "IdRodzajWolnegoNavigation")
                        .WithMany("Urlops")
                        .HasForeignKey("IdRodzajWolnego")
                        .HasConstraintName("FK_Urlop_RodzajWolnego");

                    b.Navigation("IdRodzajWolnegoNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Uzytkownik", b =>
                {
                    b.HasOne("Firma.Data.Models.DaneLogowania", "IdDaneLogowaniaNavigation")
                        .WithMany("Uzytkowniks")
                        .HasForeignKey("IdDaneLogowania")
                        .HasConstraintName("FK_Uzytkownik_DaneLogowania");

                    b.HasOne("Firma.Data.Models.DanePersonalne", "IdDanePersonalneNavigation")
                        .WithMany("Uzytkowniks")
                        .HasForeignKey("IdDanePersonalne")
                        .HasConstraintName("FK_Uzytkownik_DanePersonalne");

                    b.HasOne("Firma.Data.Models.StanowiskoPracownika", "IdStanowiskoPracownikaNavigation")
                        .WithMany("Uzytkowniks")
                        .HasForeignKey("IdStanowiskoPracownika")
                        .HasConstraintName("FK_Uzytkownik_StanowiskoPracownika");

                    b.Navigation("IdDaneLogowaniaNavigation");

                    b.Navigation("IdDanePersonalneNavigation");

                    b.Navigation("IdStanowiskoPracownikaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Wynagrodzenie", b =>
                {
                    b.HasOne("Firma.Data.Models.Pracownik", "IdPracownikaNavigation")
                        .WithMany("Wynagrodzenies")
                        .HasForeignKey("IdPracownika")
                        .HasConstraintName("FK_Wynagrodzenie_Pracownik");

                    b.HasOne("Firma.Data.Models.RodzajZatrudnienia", "IdRodzajZatrudnieniaNavigation")
                        .WithMany("Wynagrodzenies")
                        .HasForeignKey("IdRodzajZatrudnienia")
                        .HasConstraintName("FK_Wynagrodzenie_RodzajZatrudnienia");

                    b.HasOne("Firma.Data.Models.RodzajUmowy", "IdRodzajuUmowyNavigation")
                        .WithMany("Wynagrodzenies")
                        .HasForeignKey("IdRodzajuUmowy")
                        .HasConstraintName("FK_Wynagrodzenie_RodzajUmowy");

                    b.HasOne("Firma.Data.Models.StanowiskoPracownika", "IdStanowiskoPracownikaNavigation")
                        .WithMany("Wynagrodzenies")
                        .HasForeignKey("IdStanowiskoPracownika")
                        .HasConstraintName("FK_Wynagrodzenie_StanowiskoPracownika");

                    b.HasOne("Firma.Data.Models.Zatrudnienie", "IdZatrudnieniaNavigation")
                        .WithMany("Wynagrodzenies")
                        .HasForeignKey("IdZatrudnienia")
                        .HasConstraintName("FK_Wynagrodzenie_Zatrudnienie");

                    b.Navigation("IdPracownikaNavigation");

                    b.Navigation("IdRodzajZatrudnieniaNavigation");

                    b.Navigation("IdRodzajuUmowyNavigation");

                    b.Navigation("IdStanowiskoPracownikaNavigation");

                    b.Navigation("IdZatrudnieniaNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.ZakupTowaru", b =>
                {
                    b.HasOne("Firma.Data.Models.Dodatkowe", "IdDodatkoweNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdDodatkowe")
                        .HasConstraintName("FK_ZakupTowaru_Dodatkowe");

                    b.HasOne("Firma.Data.Models.DokumentSprzedazy", "IdDokumentuSprzedazyNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdDokumentuSprzedazy")
                        .HasConstraintName("FK_ZakupTowaru_DokumentSprzedazy");

                    b.HasOne("Firma.Data.Models.Kontrahent", "IdKontrahentaNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdKontrahenta")
                        .HasConstraintName("FK_ZakupTowaru_Kontrahent");

                    b.HasOne("Firma.Data.Models.Platnosci", "IdPlatnosciNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdPlatnosci")
                        .HasConstraintName("FK_ZakupTowaru_Platnosci");

                    b.HasOne("Firma.Data.Models.Rabat", "IdRabatuNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdRabatu")
                        .HasConstraintName("FK_ZakupTowaru_Rabat");

                    b.HasOne("Firma.Data.Models.RodzajDokumentu", "IdRodzajuDokumentowNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdRodzajuDokumentow")
                        .HasConstraintName("FK_ZakupTowaru_RodzajDokumentu");

                    b.HasOne("Firma.Data.Models.SposobPlatnosci", "IdSposobuPlatnosciNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdSposobuPlatnosci")
                        .HasConstraintName("FK_ZakupTowaru_SposobPlatnosci");

                    b.HasOne("Firma.Data.Models.SzczegolyTowaru", "IdSzczegolyTowaruNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdSzczegolyTowaru")
                        .HasConstraintName("FK_ZakupTowaru_SzczegolyTowaru");

                    b.HasOne("Firma.Data.Models.Towar", "IdTowaruNavigation")
                        .WithMany("ZakupTowarus")
                        .HasForeignKey("IdTowaru")
                        .HasConstraintName("FK_ZakupTowaru_Towar");

                    b.Navigation("IdDodatkoweNavigation");

                    b.Navigation("IdDokumentuSprzedazyNavigation");

                    b.Navigation("IdKontrahentaNavigation");

                    b.Navigation("IdPlatnosciNavigation");

                    b.Navigation("IdRabatuNavigation");

                    b.Navigation("IdRodzajuDokumentowNavigation");

                    b.Navigation("IdSposobuPlatnosciNavigation");

                    b.Navigation("IdSzczegolyTowaruNavigation");

                    b.Navigation("IdTowaruNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Zatrudnienie", b =>
                {
                    b.HasOne("Firma.Data.Models.RodzajZatrudnienia", "IdRodzajuUmowyNavigation")
                        .WithMany("Zatrudnienies")
                        .HasForeignKey("IdRodzajuUmowy")
                        .HasConstraintName("FK_Zatrudnienie_RodzajZatrudnienia");

                    b.HasOne("Firma.Data.Models.RodzajUmowy", "IdRodzajuUmowy1")
                        .WithMany("Zatrudnienies")
                        .HasForeignKey("IdRodzajuUmowy")
                        .HasConstraintName("FK_Zatrudnienie_RodzajUmowy");

                    b.HasOne("Firma.Data.Models.StanowiskoPracownika", "IdStanowiskoPracownikaNavigation")
                        .WithMany("Zatrudnienies")
                        .HasForeignKey("IdStanowiskoPracownika")
                        .HasConstraintName("FK_Zatrudnienie_StanowiskoPracownika");

                    b.HasOne("Firma.Data.Models.Urlop", "IdUrlopNavigation")
                        .WithMany("Zatrudnienies")
                        .HasForeignKey("IdUrlop")
                        .HasConstraintName("FK_Zatrudnienie_Urlop");

                    b.Navigation("IdRodzajuUmowy1");

                    b.Navigation("IdRodzajuUmowyNavigation");

                    b.Navigation("IdStanowiskoPracownikaNavigation");

                    b.Navigation("IdUrlopNavigation");
                });

            modelBuilder.Entity("Firma.Data.Models.Adres", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("Kontrahents");

                    b.Navigation("Pracowniks");

                    b.Navigation("TypKontrahenta");
                });

            modelBuilder.Entity("Firma.Data.Models.Bank", b =>
                {
                    b.Navigation("Kontrahents");

                    b.Navigation("PlatnoscPrzelewems");

                    b.Navigation("Pracowniks");
                });

            modelBuilder.Entity("Firma.Data.Models.DaneLogowania", b =>
                {
                    b.Navigation("Uzytkowniks");
                });

            modelBuilder.Entity("Firma.Data.Models.DanePersonalne", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("Kontrahents");

                    b.Navigation("Pracowniks");

                    b.Navigation("TypKontrahenta");

                    b.Navigation("Uzytkowniks");
                });

            modelBuilder.Entity("Firma.Data.Models.Dodatkowe", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("Kontrahents");

                    b.Navigation("Reklamacjes");

                    b.Navigation("SzczegolyTowarus");

                    b.Navigation("Towars");

                    b.Navigation("TypKontrahenta");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.DokumentSprzedazy", b =>
                {
                    b.Navigation("Reklamacjes");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.KategoriaTowaru", b =>
                {
                    b.Navigation("SzczegolyTowarus");

                    b.Navigation("Towars");
                });

            modelBuilder.Entity("Firma.Data.Models.Kontrahent", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("Reklamacjes");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.Kraj", b =>
                {
                    b.Navigation("Adres");
                });

            modelBuilder.Entity("Firma.Data.Models.Marka", b =>
                {
                    b.Navigation("SzczegolyTowarus");

                    b.Navigation("Towars");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscBlikiem", b =>
                {
                    b.Navigation("Platnoscis");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscDoDostawcy", b =>
                {
                    b.Navigation("PlatnoscBlikiems");

                    b.Navigation("PlatnoscGotowkas");

                    b.Navigation("PlatnoscKarta");

                    b.Navigation("PlatnoscPrzelewems");

                    b.Navigation("Platnoscis");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscGotowka", b =>
                {
                    b.Navigation("Platnoscis");
                });

            modelBuilder.Entity("Firma.Data.Models.Platnosci", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("Kontrahents");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscKarta", b =>
                {
                    b.Navigation("Platnoscis");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscOdKontrahenta", b =>
                {
                    b.Navigation("PlatnoscBlikiems");

                    b.Navigation("PlatnoscGotowkas");

                    b.Navigation("PlatnoscKarta");

                    b.Navigation("PlatnoscPrzelewems");

                    b.Navigation("Platnoscis");
                });

            modelBuilder.Entity("Firma.Data.Models.PlatnoscPrzelewem", b =>
                {
                    b.Navigation("Platnoscis");
                });

            modelBuilder.Entity("Firma.Data.Models.Plec", b =>
                {
                    b.Navigation("Kontrahents");

                    b.Navigation("Pracowniks");
                });

            modelBuilder.Entity("Firma.Data.Models.Pracownik", b =>
                {
                    b.Navigation("PlanUrlopus");

                    b.Navigation("Wynagrodzenies");
                });

            modelBuilder.Entity("Firma.Data.Models.Producent", b =>
                {
                    b.Navigation("Towars");
                });

            modelBuilder.Entity("Firma.Data.Models.Rabat", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("Kontrahents");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.RodzajDokumentu", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("Kontrahents");

                    b.Navigation("Towars");

                    b.Navigation("TypKontrahenta");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.RodzajUmowy", b =>
                {
                    b.Navigation("Wynagrodzenies");

                    b.Navigation("Zatrudnienies");
                });

            modelBuilder.Entity("Firma.Data.Models.RodzajWolnego", b =>
                {
                    b.Navigation("PlanUrlopus");

                    b.Navigation("Urlops");
                });

            modelBuilder.Entity("Firma.Data.Models.RodzajZatrudnienia", b =>
                {
                    b.Navigation("Wynagrodzenies");

                    b.Navigation("Zatrudnienies");
                });

            modelBuilder.Entity("Firma.Data.Models.Sklep.SklepRodzaj", b =>
                {
                    b.Navigation("Towar");
                });

            modelBuilder.Entity("Firma.Data.Models.SposobPlatnosci", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.StanowiskoPracownika", b =>
                {
                    b.Navigation("Pracowniks");

                    b.Navigation("Uzytkowniks");

                    b.Navigation("Wynagrodzenies");

                    b.Navigation("Zatrudnienies");
                });

            modelBuilder.Entity("Firma.Data.Models.Status", b =>
                {
                    b.Navigation("Reklamacjes");
                });

            modelBuilder.Entity("Firma.Data.Models.SzczegolyTowaru", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.Towar", b =>
                {
                    b.Navigation("DokumentSprzedazies");

                    b.Navigation("Reklamacjes");

                    b.Navigation("ZakupTowarus");
                });

            modelBuilder.Entity("Firma.Data.Models.TypKontrahenta", b =>
                {
                    b.Navigation("Kontrahents");

                    b.Navigation("Towars");
                });

            modelBuilder.Entity("Firma.Data.Models.Urlop", b =>
                {
                    b.Navigation("PlanUrlopus");

                    b.Navigation("Pracowniks");

                    b.Navigation("Zatrudnienies");
                });

            modelBuilder.Entity("Firma.Data.Models.Uzytkownik", b =>
                {
                    b.Navigation("Pracowniks");
                });

            modelBuilder.Entity("Firma.Data.Models.Wojewodzctwo", b =>
                {
                    b.Navigation("Adres");
                });

            modelBuilder.Entity("Firma.Data.Models.ZadanieReklamujacego", b =>
                {
                    b.Navigation("Reklamacjes");
                });

            modelBuilder.Entity("Firma.Data.Models.Zatrudnienie", b =>
                {
                    b.Navigation("Pracowniks");

                    b.Navigation("Wynagrodzenies");
                });
#pragma warning restore 612, 618
        }
    }
}
